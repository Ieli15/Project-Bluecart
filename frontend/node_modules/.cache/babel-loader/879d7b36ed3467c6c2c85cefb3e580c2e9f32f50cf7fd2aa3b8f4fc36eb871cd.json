{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Auth provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[loading,setLoading]=useState(true);// Check if user is already logged in\nuseEffect(()=>{const checkAuth=async()=>{const token=localStorage.getItem('token');if(!token){setLoading(false);return;}try{const response=await fetch('http://localhost:5000/api/auth/me',{headers:{'Authorization':`Bearer ${token}`}});if(!response.ok){throw new Error('Authentication failed');}const data=await response.json();setUser(data.user);setIsAuthenticated(true);}catch(error){console.error('Auth check error:',error);// Clear invalid token\nlocalStorage.removeItem('token');localStorage.removeItem('refresh_token');}finally{setLoading(false);}};checkAuth();},[]);// Login function\nconst login=userData=>{setUser(userData);setIsAuthenticated(true);};// Logout function\nconst logout=()=>{localStorage.removeItem('token');localStorage.removeItem('refresh_token');setUser(null);setIsAuthenticated(false);};// Update user data\nconst updateUser=userData=>{setUser(userData);};// Context value\nconst value={user,isAuthenticated,loading,login,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook to use auth context\nexport const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuth","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","error","console","removeItem","login","userData","logout","updateUser","value","Provider","useAuth"],"sources":["/home/ieli15/Development/another_marketplace/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  \n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      \n      try {\n        const response = await fetch('http://localhost:5000/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Authentication failed');\n        }\n        \n        const data = await response.json();\n        setUser(data.user);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Auth check error:', error);\n        // Clear invalid token\n        localStorage.removeItem('token');\n        localStorage.removeItem('refresh_token');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n  \n  // Login function\n  const login = (userData) => {\n    setUser(userData);\n    setIsAuthenticated(true);\n  };\n  \n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  \n  // Update user data\n  const updateUser = (userData) => {\n    setUser(userData);\n  };\n  \n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    updateUser\n  };\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC;AACA,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACW,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACAE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAE3C,GAAI,CAACF,KAAK,CAAE,CACVF,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAE,CAChEC,OAAO,CAAE,CACP,eAAe,CAAE,UAAUL,KAAK,EAClC,CACF,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClCf,OAAO,CAACc,IAAI,CAACf,IAAI,CAAC,CAClBG,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAE,MAAOc,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CACzC;AACAT,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,CAChCX,YAAY,CAACW,UAAU,CAAC,eAAe,CAAC,CAC1C,CAAC,OAAS,CACRd,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAc,KAAK,CAAIC,QAAQ,EAAK,CAC1BpB,OAAO,CAACoB,QAAQ,CAAC,CACjBlB,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAmB,MAAM,CAAGA,CAAA,GAAM,CACnBd,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,CAChCX,YAAY,CAACW,UAAU,CAAC,eAAe,CAAC,CACxClB,OAAO,CAAC,IAAI,CAAC,CACbE,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAAC,CAED;AACA,KAAM,CAAAoB,UAAU,CAAIF,QAAQ,EAAK,CAC/BpB,OAAO,CAACoB,QAAQ,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAG,KAAK,CAAG,CACZxB,IAAI,CACJE,eAAe,CACfE,OAAO,CACPgB,KAAK,CACLE,MAAM,CACNC,UACF,CAAC,CAED,mBACE5B,IAAA,CAACC,WAAW,CAAC6B,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAzB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED;AACA,MAAO,MAAM,CAAA2B,OAAO,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAAlC,UAAU,CAACI,WAAW,CAAC,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}