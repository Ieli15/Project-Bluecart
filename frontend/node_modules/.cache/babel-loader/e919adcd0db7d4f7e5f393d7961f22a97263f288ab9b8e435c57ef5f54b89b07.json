{"ast":null,"code":"// API service for making requests to the backend\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Get auth token from localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Headers for authenticated requests\nconst authHeaders = () => {\n  const token = getToken();\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': token ? `Bearer ${token}` : ''\n  };\n};\n\n// Search products across multiple e-commerce platforms\nexport const searchProducts = async (query, page = 1) => {\n  try {\n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}&page=${page}`, {\n      headers: authHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Search failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API search error:', error);\n    throw error;\n  }\n};\n\n// Compare products\nexport const compareProducts = async products => {\n  try {\n    const response = await fetch(`${API_URL}/compare`, {\n      method: 'POST',\n      headers: authHeaders(),\n      body: JSON.stringify({\n        products\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Comparison failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API comparison error:', error);\n    throw error;\n  }\n};\n\n// Get user profile\nexport const getProfile = async () => {\n  try {\n    const response = await fetch(`${API_URL}/profile`, {\n      headers: authHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch profile');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API profile error:', error);\n    throw error;\n  }\n};\n\n// Update user profile\nexport const updateProfile = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/profile`, {\n      method: 'PUT',\n      headers: authHeaders(),\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update profile');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API update profile error:', error);\n    throw error;\n  }\n};\n\n// Get search history\nexport const getSearchHistory = async (page = 1, perPage = 10) => {\n  try {\n    const response = await fetch(`${API_URL}/history?page=${page}&per_page=${perPage}`, {\n      headers: authHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch search history');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API history error:', error);\n    throw error;\n  }\n};\n\n// Delete search history item\nexport const deleteSearchHistoryItem = async id => {\n  try {\n    const response = await fetch(`${API_URL}/history/${id}`, {\n      method: 'DELETE',\n      headers: authHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete history item');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API delete history error:', error);\n    throw error;\n  }\n};\n\n// Authentication API calls\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Login failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API login error:', error);\n    throw error;\n  }\n};\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Registration failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API register error:', error);\n    throw error;\n  }\n};\nexport const refreshToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    const response = await fetch(`${API_URL}/auth/refresh`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${refreshToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Token refresh failed');\n    }\n    const data = await response.json();\n    localStorage.setItem('token', data.access_token);\n    return data;\n  } catch (error) {\n    console.error('API token refresh error:', error);\n    // Clear tokens on refresh failure\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    throw error;\n  }\n};\nimport axios from 'axios';\nconst API_BASE_URL = '/api';\nexport const fetchProductOffers = async (asin, country = 'US', limit = 100, page = 1) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/product-offers`, {\n      params: {\n        asin,\n        country,\n        limit,\n        page\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching product offers:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getToken","localStorage","getItem","authHeaders","token","searchProducts","query","page","response","fetch","encodeURIComponent","headers","ok","Error","json","error","console","compareProducts","products","method","body","JSON","stringify","getProfile","updateProfile","userData","getSearchHistory","perPage","deleteSearchHistoryItem","id","loginUser","credentials","data","registerUser","refreshToken","setItem","access_token","removeItem","axios","API_BASE_URL","fetchProductOffers","asin","country","limit","get","params"],"sources":["/home/ieli15/Development/code/phase-5/Project-Bluecart/frontend/src/services/api.js"],"sourcesContent":["// API service for making requests to the backend\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Get auth token from localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Headers for authenticated requests\nconst authHeaders = () => {\n  const token = getToken();\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': token ? `Bearer ${token}` : ''\n  };\n};\n\n// Search products across multiple e-commerce platforms\nexport const searchProducts = async (query, page = 1) => {\n  try {\n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}&page=${page}`, {\n      headers: authHeaders()\n    });\n    \n    if (!response.ok) {\n      throw new Error('Search failed');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API search error:', error);\n    throw error;\n  }\n};\n\n// Compare products\nexport const compareProducts = async (products) => {\n  try {\n    const response = await fetch(`${API_URL}/compare`, {\n      method: 'POST',\n      headers: authHeaders(),\n      body: JSON.stringify({ products })\n    });\n    \n    if (!response.ok) {\n      throw new Error('Comparison failed');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API comparison error:', error);\n    throw error;\n  }\n};\n\n// Get user profile\nexport const getProfile = async () => {\n  try {\n    const response = await fetch(`${API_URL}/profile`, {\n      headers: authHeaders()\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch profile');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API profile error:', error);\n    throw error;\n  }\n};\n\n// Update user profile\nexport const updateProfile = async (userData) => {\n  try {\n    const response = await fetch(`${API_URL}/profile`, {\n      method: 'PUT',\n      headers: authHeaders(),\n      body: JSON.stringify(userData)\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to update profile');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API update profile error:', error);\n    throw error;\n  }\n};\n\n// Get search history\nexport const getSearchHistory = async (page = 1, perPage = 10) => {\n  try {\n    const response = await fetch(`${API_URL}/history?page=${page}&per_page=${perPage}`, {\n      headers: authHeaders()\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch search history');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API history error:', error);\n    throw error;\n  }\n};\n\n// Delete search history item\nexport const deleteSearchHistoryItem = async (id) => {\n  try {\n    const response = await fetch(`${API_URL}/history/${id}`, {\n      method: 'DELETE',\n      headers: authHeaders()\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to delete history item');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API delete history error:', error);\n    throw error;\n  }\n};\n\n// Authentication API calls\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    \n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Login failed');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API login error:', error);\n    throw error;\n  }\n};\n\nexport const registerUser = async (userData) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    \n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Registration failed');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API register error:', error);\n    throw error;\n  }\n};\n\nexport const refreshToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    \n    const response = await fetch(`${API_URL}/auth/refresh`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${refreshToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error('Token refresh failed');\n    }\n    \n    const data = await response.json();\n    localStorage.setItem('token', data.access_token);\n    \n    return data;\n  } catch (error) {\n    console.error('API token refresh error:', error);\n    // Clear tokens on refresh failure\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    throw error;\n  }\n};\n\nimport axios from 'axios';\n\nconst API_BASE_URL = '/api';\n\nexport const fetchProductOffers = async (asin, country = 'US', limit = 100, page = 1) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/product-offers`, {\n      params: { asin, country, limit, page },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching product offers:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}